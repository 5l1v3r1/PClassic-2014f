import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;


public class APenguinJumpedOverTheMoon {

	public static class Point {
		public int x;
		public int y;
		
		Point(int x, int y) {
			this.x = x;
			this.y = y;
		}
		
		boolean insideCircle(Point center, int radius) {
			double distance = Math.sqrt(Math.pow((double)(center.x - x), 2) +
					Math.pow((double)(center.y - y), 2));
			// Fix rounding issues by subtracting 0.00001
			return distance <= (double)radius - 0.00001;
		}
		
		boolean insideRectangle(int rx, int ry, int rw, int rh) {
			return (x >= rx && y >= ry && x <= rx + rw && y <= ry + rh);
		}
	}
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader (
				new FileReader ("APenguinJumpedOverTheMoonIN.txt"));
				//new FileReader ("/Users/alex/Downloads/questions/APenguinJumpedOverTheMoonIN.txt"));
		
		while (br.ready()) {
			String line = br.readLine();
			String[] tokens = line.split(" ");
			int launch_x = Integer.parseInt(tokens[0]);
			int launch_y = Integer.parseInt(tokens[1]);
			int land_r = Integer.parseInt(tokens[2]);
			int land_x = Integer.parseInt(tokens[3]);
			int land_y = Integer.parseInt(tokens[4]);
			int land_w = Integer.parseInt(tokens[5]);
			int land_h = Integer.parseInt(tokens[6]);
			
			System.out.println(canWeSucceed(launch_x, launch_y, land_r,
											land_x, land_y, land_w, land_h));
		}
		
		br.close();
	}
	public static boolean canWeSucceed(int launch_x, int launch_y, int land_r,
									   int land_x, int land_y, int land_w, 
									   int land_h) {
        Point rectCorner1 = new Point(land_x, land_y);
        Point rectCorner2 = new Point(land_x, land_y + land_h);
        Point rectCorner3 = new Point(land_x + land_w, land_y);
        Point rectCorner4 = new Point(land_x + land_w, land_y + land_h);
        Point center = new Point(launch_x, launch_y);
        Point circle1 = new Point(launch_x + land_r, launch_y + land_r);
        Point circle2 = new Point(launch_x + land_r, launch_y - land_r);
        Point circle3 = new Point(launch_x - land_r, launch_y + land_r);
        Point circle4 = new Point(launch_x - land_r, launch_y - land_r);
        if (launch_x >= land_x && launch_x <= land_x + land_w) {
        	if (land_y >= launch_y - land_r && land_y <= launch_y + land_r) {
        		return true;//zies
        	} else if (land_y + land_h >= launch_y - land_r && land_y + land_h <= launch_y + land_r) {
        		return true;
        	}
        } else if (launch_y >= land_y && launch_y <= land_y + land_h) {
        	if (land_y >= launch_y - land_r && land_y <= launch_y + land_r) {
        		return true;//zies
        	} else if (land_y + land_h >= launch_y - land_r && land_y + land_h <= launch_y + land_r) {
        		return true;
        	}
        }
        return circle1.insideRectangle(land_x, land_y, land_w, land_h) ||
        	circle2.insideRectangle(land_x, land_y, land_w, land_h) ||
        	circle3.insideRectangle(land_x, land_y, land_w, land_h) ||
        	circle4.insideRectangle(land_x, land_y, land_w, land_h) ||
        	center.insideRectangle(land_x, land_y, land_w, land_h) ||
        	rectCorner1.insideCircle(center, land_r) ||
        	rectCorner2.insideCircle(center, land_r) ||
        	rectCorner3.insideCircle(center, land_r) ||
        	rectCorner4.insideCircle(center, land_r);
	}
}

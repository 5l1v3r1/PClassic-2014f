import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;

public class Concert {
    // Before submitting, make sure the main method hasn't been changed!
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new FileReader
            //("ConcertIN.txt"));
        		("/Users/alex/Downloads/questions/ConcertIN.txt"));

        while (br.ready()) {
            String base = br.readLine();
            String height = br.readLine();
            String[] pillars = br.readLine().split(" ");
            double[] pillarDoubles = new double[pillars.length];
            for (int i = 0; i < pillars.length; i++) {
                pillarDoubles[i] = Double.parseDouble(pillars[i]);
            }

            System.out.println(computeSeatingCapacity(
                Double.parseDouble(base),
                Double.parseDouble(height),
                pillarDoubles
            ));
        }
    }

    // Fill out the body of this method
    public static int computeSeatingCapacity(double base, double height, double[] pillars) {
    	int blocked = 0;
    	for (int i = 0; i < pillars.length; i += 3) {
    		double x1 = pillars[i];
    		double x2 = pillars[i + 1];
    		double y = pillars[i + 2];
    		blocked += computeBlockedArea(base, height, x1, x2, y);
    	}
    	double bigArea = height * base / 2;
    	return roundPengs(bigArea) - blocked;
    }
    
    public static int computeBlockedArea(double base, double height, double x1, double x2, double y) {
    	y = height - y;
    	double length = Math.abs(x2 - x1);
    	double bottomLength = length * (height / y);
    	double areaMid = (y) * length / 2;
    	double areaBottom = height * bottomLength / 2;
    	double remaining = Math.abs(areaBottom) - Math.abs(areaMid);
    	return roundPengs(remaining);
    }
    
    public static int roundPengs(double remaining) {
    	remaining *= 21;
    	int roundedDown = (int)remaining;
    	if (Math.abs((double)remaining - roundedDown) > 0.99999) {
    		roundedDown += 1;
    	}
        return roundedDown;
    }
    
}
